my_path="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$my_path/utils"
source "$my_path/global-env"

generate_compile_command()
{
    local CMD="$@"
    local DIR=$(pwd)
    local dir_key='"directory"'
    local cmd_key='"command"'
    local args_key='"arguments"'
    local file_key='"file"'

    local suffix_regex='(c|cc|cp|cxx|cpp|CPP|c\+\+|C|mm|M|h|hh|H|hp|hxx|hpp|HPP|h\+\+|tcc)'
    if [[ $CMD =~ ^([^[:blank:]]+)[[:blank:]]+(.*)[[:blank:]]+([^[:blank:]]+\.$suffix_regex)([[:blank:]].*)?$ ]]
    then
        FILE_NAME="${BASH_REMATCH[3]}"
        item=" {\n"
        item+="  $dir_key: $(quote $DIR),\n"

        if [[ "$use_arg_field" ]] # 'arguments' field
        then
            COMPILER="${BASH_REMATCH[1]}"
            ARGUMENTS="${BASH_REMATCH[2]}"
            if [[ ${#BASH_REMATCH[@]} == 6 ]]
            then
                ARGUMENTS=$ARGUMENTS" ${BASH_REMATCH[5]}"
            fi

            # Deal with whitespace between option and argument
            for w in "$COMPILER" "$ARGUMENTS"
            do
                if [[ $w =~ ^-.* ]]
                then
                    ARGS="$ARGS\",\n   \"$(escape $w)"
                else
                    ARGS="$ARGS $(escape $w)"
                fi
            done
            # Trim the leading whitspace added last step
            ARGS=\"${ARGS## }\"

            item+="  $args_key: [\n   $ARGS,\n   $(quote $FILE_NAME)\n  ],\n"
        else                    # 'command' field
            item+="  $cmd_key: $(quote $CMD),\n"
        fi

        # 'filename' feild
        item+="  $file_key: $(quote $FILE_NAME)\n },\n"
    fi

    # Lock and write unbufferedly (leverage stderr) to achive atomic
    [[ -n "$item" ]] && \
        (lock && \
             printf %b "$item" 2>>$db_file >&2 && \
             unlock)
}
